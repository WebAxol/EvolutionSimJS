class Service{constructor(){this.world=new World}execute(){return!1}init(){return!1}}class AgentPool{#types;#pools;constructor(e){this.world=e,this.#types={},this.#pools={}}registerType(e,t){if(this.#types[e])return console.warn(`The type named '${e}' has already been registered`),!1;this.#types[e]=t,this.#pools[e]=[]}createAgent(e,t){var n,o=this.world;class s{#type;#collections;constructor(e,t){this._children={},this.#collections={},this.#type=e,t.info&&Object.keys(t.info).forEach(e=>{let n=t.info[e];typeof n=="object"?this[e]=Object.assign({},n):this[e]=n})}getType(){return this.#type}isInCollection(e){return this.#collections[e]}getCollections(){return Object.keys(this.#collections)}addCollection(e){this.#collections[e]=1}removeCollection(e){delete this.#collections[e]}reset(e){Object.keys(e.info).forEach(t=>{let n=e.info[t];typeof n=="object"?this[t]=Object.assign({},n):this[t]=n})}}return n=new s(e,this.#types[e]),this.#pools[e].length>0?(n=this.#pools[e].pop(),this.resetAgent(n)):n=new s(e,this.#types[e]),Object.keys(t.info).forEach(e=>{n[e]=t.info[e]}),n}getCollectionsOfType(e){if(!this.#types[e])return console.warn(`Cannot get collections from unexisting type '${typename}'`),!1;let t=this.#types[e].collections||[];return t}removeAgent(e){try{let n=e.getType();this.#pools[n].push(e);let s=e.getCollections();s.forEach(t=>{WORLD.removeFromCollection(t,e)});let t=Object.keys(e._children);for(;t.length;)this.removeAgent(e._children[t[0]]),delete e._children[t[0]],t.shift()}catch{console.warn(`Error, agent ${e}`),console.log(e)}}resetAgent(e){let t=this.#types[e.getType()];e.reset(t)}}class CollectionManager{#collections;constructor(e){this.world=e,this.#collections={},this.toBeRemoved=[],this._objectPool=[]}registerCollection(e){return this.#collections[e]?(console.warn(`Collection named '${e}' already registered`),!1):(this.#collections[e]=[],this)}getCollection(e){return this.#collections[e]?this.#collections[e]:(console.warn(`Cannot get unregistered collection '${e}'`),!1)}addToCollection(e,t){if(!this.#collections[e])return console.warn(`collection named '${e} is not registered'`),!1;if(t.isInCollection(e)){throw Error(`The agent is already registered to collection ${e}`);return!1}this.#collections[e].push(t),t.addCollection(e)}cacheToBeRemoved(e,t){var n;this._objectPool.length>0?(n=this._objectPool.pop(),n.collectionName=e,n.agent=t,this.toBeRemoved.push(n)):this.toBeRemoved.push({collectionName:e,agent:t})}removeFromCollection(e,t){let n=this.#collections[e].indexOf(t);this.#collections[e].splice(n,1),t.removeCollection(e)}removeAgentsFromCollections(){for(;this.toBeRemoved.length>0;){let e=this.toBeRemoved.pop();this.removeFromCollection(e.collectionName,e.agent),e.collectionName=void 0,e.agent=void 0,this._objectPool.push(e)}}}class ServiceManager{#services;constructor(e){this.world=e,this.#services={}}registerService(e,t){if(this.#services[e])return console.warn(`Service named '${e}' already registered`),!1;if(!t||t==null)throw Error(`Cannot register invalid or null service '${e}'`);t.world=this.world,this.#services[e]=t,this.#services[e].init()}getServices(){return this.#services}getService(e){return this.#services[e]?this.#services[e]:(console.warn(`Cannot get unregistered service '${e}'`),!1)}}class EventManager{constructor(e){this.world=e,this.events={}}registerEvent(e){if(this.events[e])return console.warn(`Event named '${e} has already been registered'`),!1;this.events[e]={}}registerServiceToEvent(e,t){if(!this.events[t])return console.warn(`Cannot register service '${e}' to unregistered event '${t}'`),!1;var n=this.world.getService(e);if(!n)return console.warn(`Cannot register service '${e}' to event, because the service is not registered to the framework`),!1;if(typeof n[`on${t}`]!="function")return console.warn(`Cannot register service '${e}' to event, because the service does not have a method 'on${t}'`),!1;this.events[t][e]=n}notifyToServices(e,t=void 0){if(!this.events[e])return console.warn(`Cannot notify event '${e}' because it does not exist`),!1;WORLD.getService("AgentBehaviour");var n=Object.keys(this.events[e]);n.forEach(n=>{this.world.getService(n)[`on${e}`](t)})}}class World{#agentPool;#collectionManager;#serviceManager;#eventManager;constructor(){this.#agentPool=new AgentPool(this),this.#collectionManager=new CollectionManager(this),this.#eventManager=new EventManager(this),this.#serviceManager=new ServiceManager(this),this.frame=0,this.routine=()=>{},this.pause=!1}registerService(e,t){return this.#serviceManager.registerService(e,t)}getServices(){return this.#serviceManager.getServices()}getService(e){return this.#serviceManager.getService(e)}registerCollection(e){return this.#collectionManager.registerCollection(e)}getCollection(e){return this.#collectionManager.getCollection(e)}addToCollection(e,t){return this.#collectionManager.addToCollection(e,t)}removeFromCollection(e,t){return this.#collectionManager.cacheToBeRemoved(e,t)}registerAgentType(e,t){this.#agentPool.registerType(e,t)}createAgent(e,t){let n=this.#agentPool.createAgent(e,t),s=this.#agentPool.getCollectionsOfType(e);return s.forEach(e=>{this.addToCollection(e,n)}),n}removeAgent(e){this.#agentPool.removeAgent(e)}registerEvent(e){this.#eventManager.registerEvent(e)}registerServiceToEvent(e,t){this.#eventManager.registerServiceToEvent(e,t)}notifyEvent(e,t){this.#eventManager.notifyToServices(e,t)}execute(){if(this.pause)return;requestAnimationFrame(()=>{this.execute()}),this.#collectionManager.removeAgentsFromCollections();var e=this.getServices();Object.keys(e).forEach(t=>{e[t].execute()}),this.pause||(this.frame++,this.routine(this))}pauseExecution(){this.pause=!0}}